<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- Le package à analyser est précisé avec l’attribut base-package. L’analyse 
		est récursive, c’està- dire que tous les sous-packages seront aussi analysés. 
		Cette balise active aussi un ensemble de fonctionnalités liées aux annotations 
		(équivalent de la balise annotation-config). -->
	<context:component-scan base-package="fr" />

	<!--Injection automatique par annotation. L’autowiring via XML a des limites, 
		puisqu’il agit globalement sur les propriétés d’un objet. Il est possible 
		de paramétrer plus finement l’autowiring avec des annotations. Les annotations 
		supportées sont @Autowired (issue de Spring) et @Resource (issue de la JSR 
		250 Commons Annotations, qui est normalement utilisée pour injecter des ressources 
		JNDI). Ces annotations peuvent être apposées sur des propriétés, des constructeurs 
		ou des modificateurs (nous nous contenterons d’exemples sur les propriétés, 
		mais les principes sont identiques dans les deux autres cas). Nous allons 
		illustrer nos exemples avec @Autowired, le fonctionnement de @Resource étant 
		pratiquement équivalent. Par défaut, la détection des annotations n’est pas 
		activée. Il existe deux façons de l’activer. La première consiste à utiliser 
		la balise annotation-config du schéma context, qui active la détection d’un 
		ensemble d’annotations dans Spring : -->
	<context:annotation-config />

	<!-- La seconde façon d’activer la détection des annotations consiste à 
		déclarer dans le contexte un Bean spécifique, appelé BeanPostProcesseur, 
		qui effectuera l’injection automatiquement lors du chargement du contexte 
		: -->
	<!-- <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" 
		/> -->


	<!-- Activation de la validation (hibernate validator et validation-api) 
		<mvc:annotation-driven /> -->


	<!-- Handles HTTP GET requests for /staticResources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources/ directory Permet d'exclure 
		du filtre dispatcher un certain nombre de ressources, ici des ressources 
		statiques, css, js, img etc.. -->
	<mvc:resources location="/staticContent/" mapping="/staticContent/**"></mvc:resources>



	<import resource="spring-security.xml" />

	<!-- <import resource="dispatcher-servlet.xml" /> -->

	<import resource="spring-beans.xml" />

	<!-- incompatibilité avec jUnit4 -->
	<!-- ATTENTION LAISSER DESACTIVE FAIT BUGGER SPRING SECURITY -->
	<import resource="spring-tiles.xml" />

	<import resource="spring-datasource.xml" />

	<import resource="spring-hibernate.xml" />

	<import resource="spring-cache.xml" />

	<!-- <import resource="simpleBeanFactory.xml" /> -->



</beans>